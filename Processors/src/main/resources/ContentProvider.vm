package ${packageName};

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;

public class ${databaseName}Provider extends ContentProvider {

    public static final String AUTHORITY = "${authority}";

#set ($code = 1)
#foreach($table in $tables)
    private static final int ${table.getClassName().toUpperCase()}_SINGLE_URI_CODE = ${code}01;
    private static final int ${table.getClassName().toUpperCase()}_MULTIPLE_URI_CODE = ${code}02;
    #set ($code = $code + 1)
#end

    private static final UriMatcher URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);

    static {
#foreach($table in $tables)
        URI_MATCHER.addURI(AUTHORITY, ${table.getClassName()}Table.TABLE_NAME + "/#", ${table.getClassName().toUpperCase()}_SINGLE_URI_CODE);
        URI_MATCHER.addURI(AUTHORITY, ${table.getClassName()}Table.TABLE_NAME, ${table.getClassName().toUpperCase()}_MULTIPLE_URI_CODE);
#end
    }

    private SQLiteDatabase mDatabase;

    @Override
    public boolean onCreate() {
        mDatabase = ${databaseName}OpenHelper.getInstance(getContext()).getWritableDatabase();
        if (mDatabase != null) return true;
        return false;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
        return null;
    }

    @Override
    public String getType(Uri uri) {
        switch (URI_MATCHER.match(uri)) {
#foreach($table in $tables)
            case ${table.getClassName().toUpperCase()}_SINGLE_URI_CODE:
                return ${table.getClassName()}Table.CONTENT_ITEM_TYPE;
            case ${table.getClassName().toUpperCase()}_MULTIPLE_URI_CODE:
                return  ${table.getClassName()}Table.CONTENT_TYPE;
#end
            default:
                throw new IllegalArgumentException("Unsupported URI : " + uri);
        }
    }

    @Override
    public Uri insert(Uri uri, ContentValues contentValues) {
        return null;
    }

    @Override
    public int delete(Uri uri, String whereClause, String[] whereArgs) {
        return 0;
    }

    @Override
    public int update(Uri uri, ContentValues contentValues, String whereClause, String[] whereArgs) {
        return 0;
    }

    @Override
    public int bulkInsert(Uri uri, ContentValues[] values) {
        return 0;
    }

    private String getTableNameFromUri(Uri uri) {
        String tableName;
        switch( URI_MATCHER.match(uri) ) {

#foreach($table in $tables)
            case ${table.getClassName().toUpperCase()}_SINGLE_URI_CODE :
            case ${table.getClassName().toUpperCase()}_MULTIPLE_URI_CODE : return ${table.getClassName()}Table.TABLE_NAME;

#end
            default :  throw new IllegalArgumentException("Unsupported URI : " + uri);
        }
    }
}
