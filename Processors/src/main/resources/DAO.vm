package ${packageName};

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import java.util.ArrayList;
import java.util.List;

#if(${packageName} != ${databasePackageName})
import ${databasePackageName}.${databaseName}OpenHelper;
import ${databasePackageName}.BackgroundThreadExecutor;
import ${databasePackageName}.MainThreadExecutor;
import ${databasePackageName}.DAOListener;
#end

public class ${className}DAO {

    private SQLiteDatabase mDatabase;

    private static volatile ${className}DAO mInstance;

    public static ${className}DAO getInstance(Context context) {
        if (mInstance == null) {
            synchronized (${className}DAO.class) {
                if (mInstance == null) {
                    mInstance = new ${className}DAO(context.getApplicationContext());
                }
            }
        }
        return mInstance;
    }

    private ${className}DAO(Context context) {
        mDatabase = ${databaseName}OpenHelper.getInstance(context).getCachedDatabase();
    }

    public Cursor query(String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy) {
        return mDatabase.query(${className}Table.TABLE_NAME, columns, selection, selectionArgs, groupBy, having, orderBy);
    }

    public void query(final String[] columns, final String selection, final String[] selectionArgs, final String groupBy, final String having, final String orderBy, final DAOListener<Cursor> listener) {
    	BackgroundThreadExecutor.getInstance().execute(new Runnable() {

			@Override
			public void run() {
				final Cursor cursor = query(columns, selection, selectionArgs, groupBy, having, orderBy);
				if (listener != null)  {
					MainThreadExecutor.getInstance().execute(new Runnable() {

						@Override public void run() {
							listener.onFinish(cursor);
						}
					});
				}
			}
		});
    }

    public List<${className}> query(String selection, String[] selectionArgs, String groupBy, String having, String orderBy) {
        Cursor cursor = mDatabase.query(${className}Table.TABLE_NAME, null, selection, selectionArgs, groupBy, having, orderBy);
        return to${className}List(cursor);
    }

    public void query(final String selection, final String[] selectionArgs, final String groupBy, final String having, final String orderBy, final DAOListener<List<${className}>> listener) {
    	BackgroundThreadExecutor.getInstance().execute(new Runnable() {

			@Override
			public void run() {
				final List<${className}> ob = query(selection, selectionArgs, groupBy, having, orderBy);
				if (listener != null)  {
					MainThreadExecutor.getInstance().execute(new Runnable() {

						@Override public void run() {
							listener.onFinish(ob);
						}
					});
				}
			}
		});
    }

    public List<${className}> queryAll(String orderBy) {
        Cursor cursor = mDatabase.query(${className}Table.TABLE_NAME, null, null, null, null, null, orderBy);
        return to${className}List(cursor);
    }

    public void queryAll(final String orderBy, final DAOListener<List<${className}>> listener) {
    	BackgroundThreadExecutor.getInstance().execute(new Runnable() {

			@Override
			public void run() {
				final List<${className}> ob = queryAll(orderBy);
				if (listener != null)  {
					MainThreadExecutor.getInstance().execute(new Runnable() {

						@Override public void run() {
							listener.onFinish(ob);
						}
					});
				}
			}
		});
    }

    public List<${className}> queryByField(String field, String args, String orderBy) {
        Cursor cursor = mDatabase.query(${className}Table.TABLE_NAME, null, field + " = ?", new String[] { args }, null, null, orderBy);
        return to${className}List(cursor);
    }

    public void queryByField(final String field, final String args, final String orderBy, final DAOListener<List<${className}>> listener) {
    	BackgroundThreadExecutor.getInstance().execute(new Runnable() {

			@Override
			public void run() {
				final List<${className}> ob = queryByField(field, args, orderBy);
				if (listener != null)  {
					MainThreadExecutor.getInstance().execute(new Runnable() {

						@Override public void run() {
							listener.onFinish(ob);
						}
					});
				}
			}
		});
    }

#foreach($field in $fields)
#if(${field.isUnique()} == true)
    public ${className} queryBy$display.capitalize(${field.getFieldName()})(String value) {
        Cursor cursor = mDatabase.query(${className}Table.TABLE_NAME, null, ${className}Table.COLUMN_${field.getFieldName().toUpperCase()} + " = ?", new String[] { value }, null, null, null);
        if (cursor != null && cursor.moveToFirst()) {
            ${className} ob = to${className}(cursor);
            cursor.close();
            return ob;
        }
        return null;
    }

#end
#end
    public long insert(${className} ${className.toLowerCase()}) {
        return mDatabase.insert(${className}Table.TABLE_NAME, null, asContentValues(${className.toLowerCase()}));
    }

    public int insert(List<${className}> list) {
        int count = 0;
        try {
            mDatabase.beginTransaction();
            for (${className} ${className.toLowerCase()} : list) {
                long id = insert(${className.toLowerCase()});
                if (id != -1) count += 1;
                mDatabase.yieldIfContendedSafely();
            }
            mDatabase.setTransactionSuccessful();
        } finally {
            mDatabase.endTransaction();
        }
        return count;
    }

    public void insert(final List<${className}> list, final DAOListener<Integer> listener) {
    	BackgroundThreadExecutor.getInstance().execute(new Runnable() {

			@Override
			public void run() {
				final int count = insert(list);
				if (listener != null)  {
					MainThreadExecutor.getInstance().execute(new Runnable() {

						@Override public void run() {
							listener.onFinish(count);
						}
					});
				}
			}
		});
    }

    public int update(ContentValues contentValues, String whereClause, String[] whereArgs) {
        return mDatabase.update(${className}Table.TABLE_NAME, contentValues, whereClause, whereArgs);
    }

    public void update(final ContentValues contentValues, final String whereClause, final String[] whereArgs, final DAOListener<Integer> listener) {
        BackgroundThreadExecutor.getInstance().execute(new Runnable() {

    	    @Override public void run() {
    		    final int count = update(contentValues, whereClause, whereArgs);
    		    if (listener != null)  {
    		        MainThreadExecutor.getInstance().execute(new Runnable() {

    			        @Override public void run() {
    				        listener.onFinish(count);
    			        }
    		        });
    	        }
    		}
    	});
    }

    public int updateByField(String field, ContentValues contentValues, String value) {
    	return mDatabase.update(${className}Table.TABLE_NAME, contentValues, field + " = ?", new String[] { value });
    }

#foreach($field in $fields)
#if(${field.isUnique()} == true)
    public int updateBy$display.capitalize(${field.getFieldName()})(ContentValues contentValues, String ${field.getFieldName()}) {
    	return mDatabase.update(${className}Table.TABLE_NAME, contentValues, ${className}Table.COLUMN_${field.getFieldName().toUpperCase()} + " = ?", new String[] { ${field.getFieldName()} });
    }

#end
#end
#foreach($field in $fields)
#if(${field.isUnique()} == true)
    public int updateOrInsertBy$display.capitalize(${field.getFieldName()})(List<${className}> list) {
        int count = 0;
        try {
        mDatabase.beginTransaction();
        for (${className} ${className.toLowerCase()} : list) {
            int affected = update(asContentValues(${className.toLowerCase()}), ${className}Table.COLUMN_${field.getFieldName().toUpperCase()} + " = ?", new String[] { ${className.toLowerCase()}.get$display.capitalize(${field.getFieldName()})() + "" });
            if (affected == 0) insert(${className.toLowerCase()});
            count += affected;
            mDatabase.yieldIfContendedSafely();
        }
        mDatabase.setTransactionSuccessful();
        } finally {
            mDatabase.endTransaction();
        }
        return count;
    }

    public void updateOrInsertBy$display.capitalize(${field.getFieldName()})(final List<${className}> list, final DAOListener<Integer> listener) {
        	BackgroundThreadExecutor.getInstance().execute(new Runnable() {

    			@Override
    			public void run() {
    				final int count = updateOrInsertBy$display.capitalize(${field.getFieldName()})(list);
    				if (listener != null)  {
    					MainThreadExecutor.getInstance().execute(new Runnable() {

    						@Override public void run() {
    							listener.onFinish(count);
    						}
    					});
    				}
    			}
    		});
        }

#end
#end
    public int delete(String whereClause, String[] whereArgs) {
        return mDatabase.delete(${className}Table.TABLE_NAME, whereClause, whereArgs);
    }

    public int deleteAll() {
        return mDatabase.delete(${className}Table.TABLE_NAME, null, null);
    }

    public int deleteByField(String field, String value) {
        return mDatabase.delete(${className}Table.TABLE_NAME, field + " = ?", new String[] { value });
    }

#foreach($field in $fields)
#if(${field.isUnique()} == true)
    public int deleteBy$display.capitalize(${field.getFieldName()})(String value) {
        return mDatabase.delete(${className}Table.TABLE_NAME, ${className}Table.COLUMN_${field.getFieldName().toUpperCase()} + " = ?", new String[] {value});
    }

#end
#end
    public ContentValues asContentValues(${className} ${className.toLowerCase()}) {
        ContentValues contentValues = new ContentValues();
#foreach($field in $fields)
        contentValues.put(${className}Table.COLUMN_${field.getFieldName().toUpperCase()}, ${className.toLowerCase()}.get$display.capitalize(${field.getFieldName()})());
#end
        return contentValues;
    }

    private List<${className}> to${className}List(Cursor cursor) {
        List<${className}> list = new ArrayList<${className}>();
        if (cursor == null) return list;
        if (cursor.moveToFirst()) {
            do {
                list.add(to${className}(cursor));
            } while (cursor.moveToNext());
        }
        cursor.close();
        return list;
    }

    private ${className} to${className}(Cursor cursor) {
        if (cursor == null || cursor.getCount() <= 0) return null;
        ${className} ${className.toLowerCase()} = new ${className}();
#set ($INTEGER = "INTEGER")
#foreach($field in $fields)
#if(${field.getFieldType()} == ${INTEGER})
        ${className.toLowerCase()}.set$display.capitalize(${field.getFieldName()})(cursor.getInt(cursor.getColumnIndex(${className}Table.COLUMN_${field.getFieldName().toUpperCase()})));
#else
        ${className.toLowerCase()}.set$display.capitalize(${field.getFieldName()})(cursor.getString(cursor.getColumnIndex(${className}Table.COLUMN_${field.getFieldName().toUpperCase()})));
#end
#end
        return ${className.toLowerCase()};
    }
}
